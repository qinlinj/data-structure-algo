package org.qinlinj.algoframework._500_data_structure_design._520_advanced_array_and_hash._522_hash_table_practice;

/**
 * _522_k_FindDifference
 * <p>
 * LeetCode #389: Find the Difference
 * <p>
 * Problem:
 * Given two strings s and t, where t is generated by randomly shuffling s
 * and adding one more letter at a random position, find the letter that was added.
 * <p>
 * Approach 1 (Bit Manipulation - XOR):
 * The elegant solution uses the XOR operation, which has these properties:
 * - a ^ 0 = a (XOR with 0 gives the original number)
 * - a ^ a = 0 (XOR with itself gives 0)
 * - XOR is commutative and associative
 * <p>
 * By XORing all characters in both strings, all matched pairs cancel out (become 0),
 * and only the extra character remains.
 * <p>
 * Approach 2 (Character Counting):
 * We can also solve this by counting character frequencies in both strings
 * and finding the character with a count difference.
 * <p>
 * Time Complexity: O(n) where n is the length of the strings
 * Space Complexity: O(1)
 */
public class _522_k_FindDifference {

    public static void main(String[] args) {
        _522_k_FindDifference solution = new _522_k_FindDifference();

        // Test case 1
        String s1 = "abcd";
        String t1 = "abcde";
        char result1 = solution.findTheDifference(s1, t1);
        System.out.println("Example 1: " + result1);
        // Expected output: e

        // Test case 2
        String s2 = "";
        String t2 = "y";
        char result2 = solution.findTheDifference(s2, t2);
        System.out.println("Example 2: " + result2);
        // Expected output: y

        // Test case 3
        String s3 = "ae";
        String t3 = "eaa";
        char result3 = solution.findTheDifference(s3, t3);
        System.out.println("Example 3: " + result3);
        // Expected output: a
    }

    /**
     * Solution using XOR bit manipulation
     */
    public char findTheDifference(String s, String t) {
        // Initialize result with 0
        char result = 0;

        // XOR all characters in string s
        for (char c : s.toCharArray()) {
            result ^= c;
        }

        // XOR all characters in string t
        for (char c : t.toCharArray()) {
            result ^= c;
        }

        // The result will be the added character
        return result;
    }

    /**
     * Solution using character counting
     */
    public char findTheDifferenceWithCounting(String s, String t) {
        // Count frequency of each character
        int[] charCount = new int[26]; // For lowercase English letters

        // Increment counts for characters in t
        for (char c : t.toCharArray()) {
            charCount[c - 'a']++;
        }

        // Decrement counts for characters in s
        for (char c : s.toCharArray()) {
            charCount[c - 'a']--;
        }

        // Find the character with count 1 (the added character)
        for (int i = 0; i < 26; i++) {
            if (charCount[i] == 1) {
                return (char) ('a' + i);
            }
        }

        // Should never reach here if input is valid
        return ' ';
    }

    /**
     * Solution using sum of ASCII values
     */
    public char findTheDifferenceWithSum(String s, String t) {
        // Sum of all ASCII values in t
        int sumT = 0;
        for (char c : t.toCharArray()) {
            sumT += c;
        }

        // Sum of all ASCII values in s
        int sumS = 0;
        for (char c : s.toCharArray()) {
            sumS += c;
        }

        // The difference is the ASCII value of the added character
        return (char) (sumT - sumS);
    }
}